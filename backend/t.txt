const path = require("path");
const webpack = require("webpack");
const dotenv = require('dotenv');

const env = dotenv.config().parsed;

module.exports = {
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "./static/frontend"),
    filename: "[name].js",
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
        },
      },
    ],
  },
  optimization: {
    minimize: true,
  },
  plugins: [
    new webpack.DefinePlugin({
      "process.env": {
        // This has effect on the react lib size
        NODE_ENV: JSON.stringify("production"),
      },
    }),
  ],
};

_______________________________________________________________________________________________
                       "blion"


            <Grid item xs={12} align="center">
                <FormControl component="fieldse">
                    <FormHelperText>
                        <div align="center">
                            choos yourself
                        </div>
                    </FormHelperText>
                    <RadioGroup row defaultValue="true" /*onChange={this.handleguestcanpausechange}*/>
                        <FormControlLabel control={<Radio color="primary" />}
                                          label="Play/Pause"
                                          labelPlacement="bottom"
                                          value="true"
                        ></FormControlLabel>
                        <FormControlLabel control={<Radio color="secondary" />}
                                          label="No control"
                                          labelPlacement="bottom"
                                          value="false"
                        ></FormControlLabel>
                    </RadioGroup>
                </FormControl>
            </Grid>
_______________________________________________________________________________________________
    /*handlevoteschange(e) {
        this.setState({
            fname: e.target.value,
        });
    }

    handleguestcanpausechange(e) {
        this.setState({
            guestCanPause: e.target.value === 'true' ? true : false,
        })
    };*/
    _______________________________________________________________________________________________
                    <Switch>
                    <Route exact path="/" component={() => <p>Welcome!</p>} />
                    <Route path="/login" component={Login} />
                    <Route path="/regist" component={Regist} />
                    <Route component={() => <p>Page not found</p>} />
                </Switch>